{"version":3,"sources":["logo.svg","components/task/task.js","components/taskList/taskList.js","components/addTaskButton/addTaskButton.js","components/clearButton/clearButton.js","components/helpers/randomNumber.js","components/tasksView/tasksView.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","task","_ref","removeTask","completeTask","react_default","a","createElement","className","concat","priority","key","type","onChange","e","name","index","index_es","icon","faMinusCircle","onClick","taskList","tasks","map","components_task_task","addTaskButton","handleClick","faPlus","clearButton","deleteAll","faUndo","randomNumber","min","max","Math","round","random","Task","Object","classCallCheck","this","done","prototype","tasksView","props","_this","possibleConstructorReturn","getPrototypeOf","call","state","setState","toConsumableArray","elToRemove","filter","event","modifiedTask","find","taskDone","currentTarget","parentElement","classList","remove","add","_this2","components_taskList_taskList","components_addTaskButton_addTaskButton","addTask","components_clearButton_clearButton","clearTasks","Component","App","components_tasksView_tasksView","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.66c7cb69.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMinusCircle } from '@fortawesome/free-solid-svg-icons';\nimport './task.css';\n\nconst task = ({task, removeTask, completeTask}) => {\n        return (\n            <li className={`task priority-${task.priority} list-group-item`} key={task.key}>\n                <input type=\"checkbox\" className=\"done-btn\" onChange={e => completeTask(e, task)} />\n                <div className=\"task-col\">{task.name + task.index}</div>\n                <div className=\"task-col\">{task.priority}</div>\n                <FontAwesomeIcon className=\"text-danger\" icon={faMinusCircle} onClick={e => removeTask(task.index)}/>\n            </li>\n        );\n    }\n\nexport default task;\n/* \nclass task extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            task: this.props.task,\n            done: this.props.task.done\n        };\n    }\n    handleDoneBtn(e) {\n        if (this.state.done) {\n            this.setState({done: false});\n            this.props.task.done = false;\n            e.target.parentElement.classList.remove('done');\n        } else {\n            this.setState({done: true});\n            this.props.task.done = true;\n            e.target.parentElement.classList.add('done');\n        }\n    }\n\n    render() {\n        return (\n            <li className={`task priority-${this.state.task.priority} list-group-item ${this.isDone()}`} key={this.state.task.key}>\n                <input type=\"checkbox\" className=\"done-btn\" onChange={e => this.handleDoneBtn(e)} />\n                <div className=\"task-col\">{this.state.task.name + this.state.task.index}</div>\n                <div className=\"task-col\">{this.state.task.priority}</div>\n                <FontAwesomeIcon className=\"text-danger\" icon={faMinusCircle} onClick={e => {\n                    debugger;\n                    this.props.removeTask(this.props.task.index)\n                    }\n                }/>\n            </li>\n        );\n    }\n}\n\nexport default task;\n */","import React from 'react';\nimport Task from '../task/task.js';\n\nconst taskList = ({tasks, removeTask, completeTask}) => {\n    return (\n        <ul className=\"task-list list-group\">\n            {\n                tasks.map(task => <Task task={task} removeTask={removeTask} completeTask={completeTask}/>)\n            }\n        </ul>\n    );\n};\n\nexport default taskList;\n","import React, { Component } from 'react';\nimport './addTaskButton.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\n\nconst addTaskButton = ({handleClick}) => {\n    return (\n        <button className=\"add-task btn btn-success\" onClick={handleClick}>\n                <FontAwesomeIcon icon={faPlus}/>\n        </button>\n    );\n};\n\nexport default addTaskButton;\n","import React from 'react';\nimport './clearButton.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUndo } from '@fortawesome/free-solid-svg-icons';\n\nconst clearButton = ({deleteAll}) => {\n    return (\n        <button className=\"clear-btn btn btn-primary btn-danger\" onClick={deleteAll}>\n            <FontAwesomeIcon icon={faUndo}/>\n        </button>\n    );\n};\n\nexport default clearButton;\n","const randomNumber = (min, max) => Math.round(Math.random() * (max - min) + min);\n\nexport default randomNumber;\n","import React, { Component } from 'react';\nimport TaskList from '../taskList/taskList.js';\nimport TaskButton from '../addTaskButton/addTaskButton.js';\nimport ClearButton from '../clearButton/clearButton.js';\nimport random from '../helpers/randomNumber.js';\nconst min = 0,\n    max = 5;\n\nclass Task {\n    static getIndex() {\n        return this.index;\n    }\n    static setIndex() {\n        this.index++;\n    }\n\n    constructor(name, index) {\n        this.name = name;\n        this.priority = random(min, max);\n        this.index = index++;\n        this.done = false;\n    }\n}\n\nTask.prototype.index = 0;\n\nclass tasksView extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            taskList: [\n                new Task('Barrer', 1),\n                new Task('comer', 2),\n                new Task('dormir', 3)\n            ],\n            index: 4\n        };\n    }\n    addTask() {\n        this.setState(\n            {\n                taskList: [...this.state.taskList, new Task(`Tarea`, this.state.index)],\n                index: this.state.index + 1\n            }\n        );\n    }\n    removeTask(elToRemove) {\n        this.setState(\n            {\n                taskList: [...this.state.taskList.filter(e => e.index !== elToRemove)]\n            }\n        );\n    }\n    clearTasks() {\n        this.setState({taskList: []});\n    }\n    completeTask(event, task) {\n        let taskList = [...this.state.taskList],\n            modifiedTask = taskList.find(taskDone => taskDone.index === task.index);\n        if (modifiedTask.done) {\n            modifiedTask.done = false;\n            event.currentTarget.parentElement.classList.remove('done');\n        } else {\n            modifiedTask.done = true;\n            event.currentTarget.parentElement.classList.add('done');\n        }\n        this.setState({taskList});\n    }\n\n    render() {\n        return (\n            <div className=\"task-view container-fluid bg-light\">\n                <div className=\"task-tile\">\n                    <h3>\n                        My task's list\n                    </h3>\n                </div>\n                <TaskList tasks={this.state.taskList} completeTask={(e, task) => this.completeTask(e, task)} removeTask={e => this.removeTask(e)}/>\n                <TaskButton handleClick={() => this.addTask()}/>\n                <ClearButton deleteAll={() => this.clearTasks()}/>\n            </div>\n        );\n    }\n}\n\nexport default tasksView;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TasksView from './components/tasksView/tasksView.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <TasksView />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}